[tool.poetry]
name = "{{cookiecutter.project_name}}"
version = "0.1.0"
description = ""
authors = [

]
maintainers = [

]
readme = "README.md"

[tool.poetry.dependencies]
python = "^3.11"
fastapi = "^0.108.0"
uvicorn = { version = "^0.25.0", extras = ["standard"] }
{%- if cookiecutter.gunicorn == "True" %}
gunicorn = "^21.2.0"
{%- endif %}
{%- if cookiecutter.add_users == "True" %}
    {%- if cookiecutter.orm == "sqlalchemy" %}
fastapi-users = "^12.1.2"
fastapi-users-db-sqlmodel = "^0.3.0"
    {%- endif %}
{%- endif %}
pydantic = "^2"
pydantic-settings = "^2"
asgiref = "^3.7.2"
yarl = "^1.9.2"
ujson = "^5.8.0"
{%- if cookiecutter.orm == "sqlalchemy" %}
SQLAlchemy = {version = "^2.0.18", extras = ["asyncio"]}
sqlmodel = "^0.0.14"
    {%- if cookiecutter.enable_migrations == "True" %}
alembic = "^1.11.1"
    {%- endif %}
    {%- if cookiecutter.db_info.name == "postgresql" %}
asyncpg = "^0.29.0"
    {%- elif cookiecutter.db_info.name == "mysql" %}
aiomysql = "^0.2.0"
mysqlclient = "^2.2.1"
    {%- endif %}
{%- endif %}
{%- if cookiecutter.enable_redis == "True" %}
fastapi-cache2 = {extras = ["redis"], version = "^0.2.1"}
fastapi-limiter = "^0.1.6"
# redis = {version = "^5.0.1", extras = ["hiredis"]}
{%- endif %}
{%- if cookiecutter.self_hosted_swagger == 'True' %}
aiofiles = "^23.1.0"
{%- endif %}
httptools = "^0.6.0"
{%- if cookiecutter.enable_rmq == "True" %}
aio-pika = "^9.1.4"
{%- endif %}
{%- if cookiecutter.enable_loguru == "True" %}
loguru = "^0.7.0"
{%- endif %}
orjson = "^3.9.10"
{%- if cookiecutter.enable_kafka == "True" %}
aiokafka = "^0.10.0"
{%- endif %}
{%- if cookiecutter.enable_taskiq == "True" %}
taskiq = "^0"
taskiq-fastapi = "^0"
    {%- if cookiecutter.enable_redis == "True" %}
taskiq-redis = "^0"
    {%- endif %}
    {%- if cookiecutter.enable_rmq == "True" %}
taskiq-aio-pika = "^0"
    {%- endif %}
    {%- if (cookiecutter.enable_rmq or cookiecutter.enable_rmq) != "True" %}
pyzmq = "^25"
    {%- endif %}
{%- endif %}
stackprinter = "^0.2.11"
fastapi-pagination = "^0.12.14"

[tool.poetry.dev-dependencies]
pytest = "^7.2.1"
flake8 = "~6.1.0"
mypy = "^1.1.1"
isort = "^5.11.4"
pre-commit = "^3.0.1"
wemake-python-styleguide = "^0.18.0"
black = "^23.12.1"
autoflake = "^2.2.1"
pytest-cov = "^4.0.0"
anyio = "^3.7.1"
pytest-env = "^1.1.3"
{%- if cookiecutter.enable_redis == "True" %}
fakeredis = "^2.5.0"
{%- endif %}
httpx = "^0.26.0"
{%- if cookiecutter.enable_taskiq == "True" %}
taskiq = { version = "^0", extras = ["reload"] }
{%- endif %}
ruff = "^0.1.11"

[tool.isort]
profile = "black"
multi_line_output = 3
src_paths = ["{{cookiecutter.project_name}}",]
line_length = 120

[tool.mypy]
strict = true
ignore_missing_imports = true
allow_subclassing_any = true
allow_untyped_calls = true
pretty = true
show_error_codes = true
implicit_reexport = true
allow_untyped_decorators = true
warn_unused_ignores = false
warn_return_any = false
namespace_packages = true

{%- if cookiecutter.enable_redis == "True" %}

# Remove this and add `types-redis`
# when the issue https://github.com/python/typeshed/issues/8242 is resolved.
[[tool.mypy.overrides]]
module = [
    'redis.asyncio'
]
ignore_missing_imports = true

{%- endif %}

[tool.pytest.ini_options]
filterwarnings = [
    "error",
    "ignore::DeprecationWarning",
    "ignore:.*unclosed.*:ResourceWarning",
]
env = [
    "{{cookiecutter.project_name | upper}}_ENVIRONMENT=pytest",
    "{{cookiecutter.project_name | upper}}_DB_BASE={{cookiecutter.project_name}}_test",
]

[tool.black]
line-length = 120
target-version = ['py311']
include = '\.pyi?$'
# 'extend-exclude' excludes files or directories in addition to the defaults
extend-exclude = '''
# A regex preceded with ^/ will apply only to files and directories
# in the root of the project.
(
^/foo.py    # exclude a file named foo.py in the root of the project
| .*_pb2.py  # exclude autogenerated Protocol Buffer files anywhere in the project
)
'''


[fastapi-template.options]
{%- for key, value in cookiecutter.items() %}
    {%- if not key.startswith("_") and not key == "db_info" %}
{{key}} = "{{value}}"
    {%- endif %}
{%- endfor %}

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"
